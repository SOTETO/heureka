#!/bin/bash

source "commands/colors"
source "commands/manual"
source "commands/git-clone-rm"
source "commands/docker"
source "commands/environment"
source "commands/admin"
#source "microservices/ms-drops/env.sh"
msEnvs=(microservices/*/env.sh)
for file in "${msEnvs[@]}"; do
  source "$file"
done

msDirs=(microservices/*)
export MICROSERVICES=()
for dir in "${msDirs[@]}"; do
  MICROSERVICES+=$(echo "$dir" | sed s?microservices/ms-??)
done

export MAINWORKDIR=$(cd $(dirname $0) && pwd)

function calcPrompt () {
  local promptExt=$(getPromptExt "$YELLOW" "$LIGHTBLUE" "$RED" "$NC")
  #if [[ ! -z "$promptExt" ]]; then
  #  promptExt="${promptExt}"
  #fi
  echo -e "${YELLOW}heureka${promptExt}${YELLOW}> ${NC}"
}

function init () {
  printf "Welcome to ${YELLOW}HEUREKA!${NC}\nSetup a development environment to implement microservices for the HEUREKA platform."
  readHeurekaConf
  printCurrentConf "$YELLOW" "$LIGHTBLUE" "$NC"
  printf "\n"

  local selectedEnv=$(getEnv)
  case $selectedEnv in
	"PROD")
	  printf "${YELLOW}PROD${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "PROD"
          prod
	  ;;
	"DEV NEW")
          printf "${YELLOW}DEV NEW${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "DEV NEW"
          create
	  ;;
	"INFRA")
          printf "${YELLOW}INFRA${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "INFRA"
          infra
	  ;;
	"DEV "$(drops_command_uppercase))
          printf "${YELLOW}DEV $(drops_command_uppercase)${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "DEV $(drops_command_uppercase)"
          drops_env "$(drops_command_uppercase)"
	  ;;
	*)
	  initConsole
	  ;;
  esac
  initConsole
}

function initConsole () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" environment ms
    case "$environment" in
	"dev")
	  case "$ms" in
	    $(drops_command))
              setConfig "env" "DEV $(drops_command_uppercase)"
	      drops_env "$(drops_command_uppercase)"
	      ;;
	    "infra")
              setConfig "env" "INFRA"
	      infra
	      ;;
	    "new")
              setConfig "env" "DEV NEW"
	      create
	      ;;
	    *)
	      man "MAIN"
	      ;;
	  esac
	  ;;
	"prod")
          setConfig "env" "PROD"
	  prod
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  man "MAIN"
	  ;;
    esac
  done
}

function prod () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd para1 para2
    case "$cmd" in
	"up")
	  gitClone docu
	  dockerRun prod
          setConfig "running" "yes"
          prompt=$(calcPrompt)
	  ;;
	"stop")
	  dockerStop prod
          setConfig "running" "stopped"
          prompt=$(calcPrompt)
	  ;;
	"rm")
	  case "$para1" in
              "drops")
                case "$para2" in
                    "volumes") dockerRmVolumes prod drops-database
                       ;;
                    *) man "PROD"
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para2" in
                    "volumes") dockerRmVolumes prod dispenser-database
                       ;;
                    *) man "PROD"
                       ;;
                esac
                  ;;
               "")
                  dockerRm prod
                  gitRemove docu false
		  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) man "PROD"
                  ;;
          esac
	  ;;
	"admin")
	  prodDropsAdmin prod
	  ;;
	"leave")
          setEnvToIdle
          prompt=$(calcPrompt)
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  man "PROD"
	  ;;
    esac
  done
}

function create () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd sub para1 para2
    case "$cmd" in
        "up")
          gitClone docu
          dockerRun dev
          setConfig "running" "yes"
          prompt=$(calcPrompt)
          ;;
        "stop")
          dockerStop dev
          setConfig "running" "stopped"
          prompt=$(calcPrompt)
          ;;
        "rm")
          case "$sub" in
              "drops")
                case "$para1" in
                    "volumes") dockerRmVolumes dev drops-database
                       ;;
                    *) man "NEW"
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para1" in
                    "volumes") dockerRmVolumes dev dispenser-database
                       ;;
                    *) man "NEW"
                       ;;
                esac
                  ;;
               "")
                  dockerRm dev
                  gitRemove docu false
                  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) man "NEW"
                  ;;
          esac
          ;;
        "admin")
          prodDropsAdmin dev
          ;;
        "leave")
          setEnvToIdle
          prompt=$(calcPrompt)
          break
          ;;
        "exit")
          exit 1
          ;;
        *)
          man "NEW"
          ;;
    esac
  done
}

function infra () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd sub para1 para2
    case "$cmd" in
      "clone") gitClone infra;;
      "rm")
        case "$sub" in
          "docu")
             gitRemove infra true
             #gitRemove docu
          ;;
          "")
             gitRemove infra false
          ;;
          *)
             man "INFRA"
          ;;
        esac
      ;;
      "docker")
        case "$sub" in
          "up")
               dockerRun infra
	       setConfig "running" "yes"
               prompt=$(calcPrompt)
               ;;
          "rm")
	     case "$para1" in
               "dispenser")
                  case "$para2" in
                    "volumes") dockerRmVolumes infra dispenser-database;;
                    *) man "INFRA";;
                  esac
               ;;
               "")
		  dockerRm infra
                  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) man "INFRA";;
             esac
	  ;;
	  *) man "INFRA";;
	esac
      ;;
      "leave")
        setEnvToIdle
        prompt=$(calcPrompt)
        break
      ;;
      "exit") exit 1;;
      *) man "INFRA";;
    esac
  done
}

prompt=$(calcPrompt)
init
