#!/bin/bash

source "commands/colors"
source "commands/manual"
source "commands/git-clone-rm"
source "commands/docker"
source "commands/environment"
source "commands/admin"
source "commands/create"

export MAINWORKDIR=$(cd $(dirname $0) && pwd)

function initHeureka () {
  msEnvs=(microservices/*/env.sh)
  for file in "${msEnvs[@]}"; do
    source "$file"
  done

  msDirs=(microservices/*)
  export MICROSERVICES=()
  for dir in "${msDirs[@]}"; do
    MICROSERVICES+=($(echo "$dir" | sed s?microservices/ms-??))
  done

  # reload global configs
  modes=("infra" "prod")
  for mode in "${modes[@]}"; do
    reloadGlobalConfig "$mode"
  done

  # reload MS configs
  for ms in "${MICROSERVICES[@]}"; do
    reloadMSConfig "$ms"
  done
}

function calcPrompt () {
  local promptExt=$(getPromptExt "$YELLOW" "$LIGHTBLUE" "$RED" "$NC")
  #if [[ ! -z "$promptExt" ]]; then
  #  promptExt="${promptExt}"
  #fi
  echo -e "${YELLOW}heureka${promptExt}${YELLOW}> ${NC}"
}

function init () {
#  printf "Welcome to ${YELLOW}HEUREKA!${NC}\nSetup a development environment to implement microservices for the HEUREKA platform."
  readHeurekaConf
#  printCurrentConf "$YELLOW" "$LIGHTBLUE" "$NC"
#  printf "\n"

  local selectedEnv=$(getEnv)
  case $selectedEnv in
	"PROD")
	  printf "${YELLOW}PROD${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "PROD"
          prod
	  ;;
	"INFRA")
          printf "${YELLOW}INFRA${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "INFRA"
          infra
	  ;;
	*)
          local msEnv=false
          # Check if the consoles state is not in the default environments (prod, dev, infra),
          # but in the DEV environment of a microservice
          for ms in "${MICROSERVICES[@]}"; do
            local upperFunc=$ms"_command_uppercase"
            local upper=$(eval $upperFunc)
            if [[ "$selectedEnv" == "$upper" ]]; then
               msEnv=true
               printf "${YELLOW}$upper${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
               setConfig "env" "$upper"
               local envCMD=$ms"_env"
               eval $envCMD "$upper"
            fi
          done
          # If the $selectedEnv does not identifies a microservices environment, load default cli
          if [ $msEnv = false ]; then
	    initConsole
          fi
	  ;;
  esac
  initConsole
}

function initConsole () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" environment ms
    case "$environment" in
        "infra")
          setConfig "env" "INFRA"
          infra
          ;;
        "new")
          createNewMS
          ;;
	"prod")
          setConfig "env" "PROD"
	  prod
	  ;;
        "reload")
          exec bash heureka
          ;;
	"exit")
	  exit 1
	  ;;
        *)
          local msEnv=false
          # Check if the consoles state is not in the default environments (prod, dev, infra),
          # but in the DEV environment of a microservice
          for service in "${MICROSERVICES[@]}"; do
            local commandFunc=$service"_command"
            local upperFunc=$service"_command_uppercase"
            local command=$(eval $commandFunc)
            local upper=$(eval $upperFunc)
            if [[ "$environment" == "$command" ]]; then
              msEnv=true
              setConfig "env" "$upper"
              local envCMD=$service"_env"
              eval $envCMD "$upper"
            fi
          done
          # If the $selectedEnv does not identifies a microservices environment, load default cli
          if [ $msEnv = false ]; then
            man "MAIN"
          fi
          ;;
    esac
  done
}

function prod () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd para1 para2
    case "$cmd" in
	"up")
	  gitClone docu
	  dockerRun prod
          initGlobalNavigation prod
          setConfig "running" "yes"
          prompt=$(calcPrompt)
	  ;;
	"stop")
	  dockerStop prod
          setConfig "running" "stopped"
          prompt=$(calcPrompt)
	  ;;
	"rm")
	  case "$para1" in
              "drops")
                case "$para2" in
                    "volumes") dockerRmVolumes prod drops-database
                       ;;
                    *) man "PROD"
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para2" in
                    "volumes") dockerRmVolumes prod dispenser-database
                       ;;
                    *) man "PROD"
                       ;;
                esac
                  ;;
               "")
                  dockerRm prod
                  gitRemove docu false
		  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) man "PROD"
                  ;;
          esac
	  ;;
	"admin")
	  prodDropsAdmin prod
	  ;;
	"leave")
          setEnvToIdle
          prompt=$(calcPrompt)
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  man "PROD"
	  ;;
    esac
  done
}

function infra () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd sub para1 para2
    case "$cmd" in
      "clone") gitClone infra;;
      "rm")
        case "$sub" in
          "docu")
             gitRemove infra true
             #gitRemove docu
          ;;
          "")
             gitRemove infra false
          ;;
          *)
             man "INFRA"
          ;;
        esac
      ;;
      "docker")
        case "$sub" in
          "up")
            case "$para1" in
                "dispenser") dockerRun infra running-dispenser;;
                *) dockerRun infra;;
            esac
            initGlobalNavigation infra
	        setConfig "running" "yes"
            prompt=$(calcPrompt)
            ;;
          "rm")
	        case "$para1" in
               "dispenser")
                  case "$para2" in
                    "volumes") dockerRmVolumes infra dispenser-database;;
                    *)
                      dockerRm infra dispenser
                      setConfig "running" "no"
                      prompt=$(calcPrompt)
                     ;;
                  esac
               ;;
               "")
		          dockerRm infra
                  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) man "INFRA";;
             esac
	  ;;
	  *) man "INFRA";;
	esac
      ;;
      "leave")
        setEnvToIdle
        prompt=$(calcPrompt)
        break
      ;;
      "exit") exit 1;;
      *) man "INFRA";;
    esac
  done
}

initHeureka
prompt=$(calcPrompt)
init
