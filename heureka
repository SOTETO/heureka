#!/bin/bash

source "commands/init"
source "commands/git-clone-rm"
source "commands/docker"
source "commands/drops"
source "commands/arise"
source "commands/environment"

RED='\033[0;31m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
NC='\033[0m' # No Color

function man () {
  echo -e "
${YELLOW}HEUREKA CLI${NC}
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  ${YELLOW}prod${NC}				Start production environment
  ${YELLOW}dev new${NC}			Initiate a development environment for a complete new microservice.
  dev drops                     ${RED}Additional:${NC} Initiate a development environment for the MS-DROPS.
  dev infra                     ${RED}Additional:${NC} Initiate a development environment for infrastructure services and widget required to run the microservices.
  ${YELLOW}exit${NC}                          Close console
  ${YELLOW}*${NC}                             Help
"
}

function prodMan () {
  echo -e "
${YELLOW}HEUREKA PROD-CLI${NC}
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  up				Start the 'docker-compose up' considering the '.docker-conf/mode_prod/.env' file. Additionally, the documentation contents will be cloned from a git repository.
  stop				Stop all created containers.
  rm				Stop and remove all docker containers described in the docker-compose files. Additionally, the documentation contents of the cloned repository will be removed.
  rm drops volumes		Remove the drops volumes. That means the database contents.
  rm dispenser volumes		Remove the dispenser volumes. That means the database contents.
  admin				Sets admin access rights in DROPS for a specific user identified by its email address
  leave                         Leave PROD environment
  exit                          Close console
  *                             Help
"
}

function createMan () {
  echo -e "
${YELLOW}HEUREKA DEV-CLI${NC}
CREATE A NEW MICROSERVICE
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  up                            Start the 'docker-compose up' considering the '.docker-conf/mode_dev/.env' file. Additionally, the documentation contents will be cloned from a git repository.
  stop                          Stop all created containers.
  rm                            Stop and remove all docker containers described in the docker-compose files. Additionally, the documentation contents of the cloned repository will be removed.
  rm drops volumes              Remove the drops volumes. That means the database contents.
  rm dispenser volumes          Remove the dispenser volumes. That means the database contents.
  admin                         Sets admin access rights in DROPS for a specific user identified by its email address
  leave                         Leave DEV environment
  exit                          Close console
  *                             Help
"
}


function devMan () {
  echo -e "
${YELLOW}HEUREKA DEV-CLI${NC}
MICROSERVICE: $1
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  up				Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.dev.drops' file. Additionally, the documentation contents will be cloned from a git repository.
  git clone   			Clone the required git repositories
  git rm      			Remove the git repositories excluding the documentatuin contents
  git rm docu                   Remove the git repositories including the documentation contents
  docker up   			Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.dev.drops' file
  docker rm   			Stop and remove all docker containers described in the docker-compose files
  docker rm drops volumes	Remove the drops volumes. That means the database contents.
  docker rm dispenser volumes   Remove the dispenser volumes. That means the database contents.
  drops up man			Shows a manual explaining how to setup the DROPS backend service
  drops admin			Sets admin access rights in DROPS for a specific user identified by its email address
  arise up man			Shows a manual explaining how to setup the ARISE frontend service
  leave				Leave DEV environment
  exit				Close console
  *           			Help
"
}

function infraMan () {
  echo -e "
${YELLOW}HEUREKA DEV-CLI${NC}
INFRASTRUCTURE REQUIRED TO RUN MICROSERVICES
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  clone                         Clone the required git repositories
  rm                        	Remove the git repositories excluding the documentatuin contents
  rm docu                   	Remove the git repositories including the documentation contents
  docker up                     Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.infra' file (starts the dispenser database on localhost:27017)
  docker rm                     Stop and remove all docker containers described in the docker-compose files
  docker rm dispenser volumes   Remove the dispenser volumes. That means the database contents.
  leave                         Leave DEV environment
  exit                          Close console
  *                             Help
"
}

function calcPrompt () {
  local promptExt=$(getPromptExt "$YELLOW" "$LIGHTBLUE" "$RED" "$NC")
  #if [[ ! -z "$promptExt" ]]; then
  #  promptExt="${promptExt}"
  #fi
  echo -e "${YELLOW}heureka${promptExt}${YELLOW}> ${NC}"
}

function init () {
  printf "Welcome to ${YELLOW}HEUREKA!${NC}\nSetup a development environment to implement microservices for the HEUREKA platform."
  readHeurekaConf
  printCurrentConf "$YELLOW" "$LIGHTBLUE" "$NC"
  printf "\n"

  local selectedEnv=$(getEnv)
  case $selectedEnv in
	"PROD")
	  printf "${YELLOW}PROD${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "PROD"
          prod
	  ;;
	"DEV NEW")
          printf "${YELLOW}DEV NEW${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "DEV NEW"
          create
	  ;;
	"INFRA")
          printf "${YELLOW}INFRA${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "INFRA"
          infra
	  ;;
	"DEV DROPS")
          printf "${YELLOW}DEV DROPS${NC} environment has been selected automatically, since you've choosen it the last time. Use 'leave' to switch the environment.\n"
	  setConfig "env" "DEV DROPS"
          dev "DROPS"
	  ;;
	*)
	  initConsole
	  ;;
  esac
  initConsole
}

function initConsole () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" environment ms
    case "$environment" in
	"dev")
	  case "$ms" in
	    "drops")
              setConfig "env" "DEV DROPS"
	      dev "DROPS"
	      ;;
	    "infra")
              setConfig "env" "INFRA"
	      infra
	      ;;
	    "new")
              setConfig "env" "DEV NEW"
	      create
	      ;;
	    *)
	      man
	      ;;
	  esac
	  ;;
	"prod")
          setConfig "env" "PROD"
	  prod
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  man
	  ;;
    esac
  done
}

function prod () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd para1 para2
    case "$cmd" in
	"up")
	  gitCloneDocu
	  dockerRun prod
          setConfig "running" "yes"
          prompt=$(calcPrompt)
	  ;;
	"stop")
	  dockerStop prod
          setConfig "running" "stopped"
          prompt=$(calcPrompt)
	  ;;
	"rm")
	  case "$para1" in
              "drops")
                case "$para2" in
                    "volumes") dockerRmVolumes prod drops-database
                       ;;
                    *) prodMan
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para2" in
                    "volumes") dockerRmVolumes prod dispenser-database
                       ;;
                    *) prodMan
                       ;;
                esac
                  ;;
               "")
                  dockerRm prod
                  gitRemove docu
		  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) prodMan
                  ;;
          esac
	  ;;
	"admin")
	  dropsAdmin prod
	  ;;
	"leave")
          setEnvToIdle
          prompt=$(calcPrompt)
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  prodMan
	  ;;
    esac
  done
}

function create () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd sub para1 para2
    case "$cmd" in
        "up")
          gitCloneDocu
          dockerRun dev
          setConfig "running" "yes"
          prompt=$(calcPrompt)
          ;;
        "stop")
          dockerStop dev
          setConfig "running" "stopped"
          prompt=$(calcPrompt)
          ;;
        "rm")
          case "$sub" in
              "drops")
                case "$para1" in
                    "volumes") dockerRmVolumes dev drops-database
                       ;;
                    *) createMan
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para1" in
                    "volumes") dockerRmVolumes dev dispenser-database
                       ;;
                    *) createMan
                       ;;
                esac
                  ;;
               "")
                  dockerRm dev
                  gitRemove docu
                  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) createMan
                  ;;
          esac
          ;;
        "admin")
          dropsAdmin dev
          ;;
        "leave")
          setEnvToIdle
          prompt=$(calcPrompt)
          break
          ;;
        "exit")
          exit 1
          ;;
        *)
          createMan
          ;;
    esac
  done
}

function dev () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd sub para1 para2
    case "$cmd" in
	"up")
	  gitClone drops
	  dockerRun dev_ms_drops
          setConfig "running" "yes"
          prompt=$(calcPrompt)
	  ;;
	"git")
	  case "$sub" in
		"clone") gitClone drops
			;;
		"rm")
		  case "$para1" in
		    "docu")
			gitRemove drops
			gitRemove docu
		    ;;
		    "")
			gitRemove drops
		    ;;
		    *)
			devMan $1
		    ;;
		  esac
		;;
	        *) devMan $1
			;;
	  esac
	  ;;
	"docker")
	  case "$sub" in
		"up") dockerRun dev_ms_drops
                      setConfig "running" "yes"
                      prompt=$(calcPrompt)
			;;
		"rm")
		  case "$para1" in
			"drops")
			  case "$para2" in
				"volumes") dockerRmVolumes dev_ms_drops drops-database
					;;
				*) devMan $1
					;;
			  esac
			  ;;
			"dispenser")
			  case "$para2" in
				"volumes") dockerRmVolumes dev_ms_drops dispenser-database
					;;
				*) devMan $1
					;;
			  esac
			  ;;
			"") dockerRm dev_ms_drops
                            setConfig "running" "no"
                            prompt=$(calcPrompt)
			  ;;
			*) devMan $1
			  ;;
		  esac
			;;
		*) devMan $1
			;;
	  esac
	  ;;
	"drops")
	  case "$sub" in
		"up")
		  case "$para1" in
			"man") dropsMan dev_ms_drops
			  ;;
			*) devMan $1
			  ;;
		  esac
			;;
		"admin") dropsAdmin dev_ms_drops
	  		;;
		*) devMan $1
			;;
	  esac
	  ;;
	"arise")
	  case "$sub" in
		"up")
		  case "$para1" in
			"man") ariseMan
	  		  ;;
			*) devMan $1
			  ;;
		  esac
			;;
		*) devMan $1
			;;
	  esac
	  ;;
	"leave")
          setEnvToIdle
          prompt=$(calcPrompt)
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  devMan $1
	  ;;
	# Todo: catch arrow up and down
    esac
  done
}

function infra () {
  prompt=$(calcPrompt)
  for (( ; ; ))
  do
    read -r -p $"${prompt}" cmd sub para1 para2
    case "$cmd" in
      "clone") gitClone infra;;
      "rm")
        case "$para1" in
          "docu")
             gitRemove infra
             gitRemove docu
          ;;
          "")
             gitRemove infra
          ;;
          *)
             infraMan
          ;;
        esac
      ;;
      "docker")
        case "$sub" in
          "up")
               dockerRun infra
	       setConfig "running" "yes"
               prompt=$(calcPrompt)
               ;;
          "rm")
	     case "$para1" in
               "dispenser")
                  case "$para2" in
                    "volumes") dockerRmVolumes infra dispenser-database;;
                    *) infraMan;;
                  esac
               ;;
               "")
		  dockerRm infra
                  setConfig "running" "no"
                  prompt=$(calcPrompt)
                  ;;
               *) infraMan;;
             esac
	  ;;
	  *) infraMan;;
	esac
      ;;
      "leave")
        setEnvToIdle
        prompt=$(calcPrompt)
        break
      ;;
      "exit") exit 1;;
      *) infraMan;;
    esac
  done
}

prompt=$(calcPrompt)
init
