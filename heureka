#!/bin/bash

source "commands/init"
source "commands/git-clone-rm"
source "commands/docker"
source "commands/drops"
source "commands/arise"

RED='\033[0;31m'
YELLOW='\033[1;33m'
LIGHTBLUE=='\033[1;34m'
NC='\033[0m' # No Color

function man () {
  echo -e "
${YELLOW}HEUREKA CLI${NC}
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  dev drops                     Initiate a development environment for the MS-DROPS.
  dev infra                     Initiate a development environment for infrastructure services and widget required to run the microservices.
  prod				Start production environment
  exit                          Close console
  *                             Help
"
}

function prodMan () {
  echo -e "
${YELLOW}HEUREKA PROD-CLI${NC}
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  up				Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.prod' file
  stop				Stop all created containers.
  rm				Stop and remove all docker containers described in the docker-compose files
  rm drops volumes		Remove the drops volumes. That means the database contents.
  rm dispenser volumes		Remove the dispenser volumes. That means the database contents.
  admin				Sets admin access rights in DROPS for a specific user identified by its email address
  leave                         Leave PROD environment
  exit                          Close console
  *                             Help
"
}

function devMan () {
  echo -e "
${YELLOW}HEUREKA DEV-CLI${NC}
MICROSERVICE: $1
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  git clone   			Clone the required git repositories
  git rm      			Remove the git repositories
  docker up   			Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.dev.drops' file
  docker rm   			Stop and remove all docker containers described in the docker-compose files
  docker rm drops volumes	Remove the drops volumes. That means the database contents.
  docker rm dispenser volumes   Remove the dispenser volumes. That means the database contents.
  drops up man			Shows a manual explaining how to setup the DROPS backend service
  drops admin			Sets admin access rights in DROPS for a specific user identified by its email address
  arise up man			Shows a manual explaining how to setup the ARISE frontend service
  leave				Leave DEV environment
  exit				Close console
  *           			Help
"
}

function infraMan () {
  echo -e "
${YELLOW}HEUREKA DEV-CLI${NC}
INFRASTRUCTURE REQUIRED TO RUN MICROSERVICES
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  clone                         Clone the required git repositories
  rm                            Remove the git repositories
  docker up                     Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.infra' file (starts the dispenser database on localhost:27017)
  docker rm                     Stop and remove all docker containers described in the docker-compose files
  docker rm dispenser volumes   Remove the dispenser volumes. That means the database contents.
  leave                         Leave DEV environment
  exit                          Close console
  *                             Help
"
}

function init () {
  printf "Welcome to ${YELLOW}HEUREKA!${NC}\nSetup a development environment to implement the microservice DROPS."
  #initPathes
  printf "\n"
  for (( ; ; ))
  do
    read -r -p $'\033[1;33mheureka> \e[0m' environment ms
    case "$environment" in
	"dev")
	  case "$ms" in
	    "drops")
	      dev "DROPS"
	      ;;
	    "infra")
	      infra
	      ;;
	    *)
	      man
	      ;;
	  esac
	  ;;
	"prod")
	  prod
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  man
	  ;;
    esac
  done
}

function prod () {
  for (( ; ; ))
  do
    read -r -p $'\033[1;33mheureka-\033[1;34mPROD\033[1;33m> \e[0m' cmd para1 para2
    case "$cmd" in
	"up")
	  dockerRun prod
	  ;;
	"stop")
	  dockerStop prod
	  ;;
	"rm")
	  case "$para1" in
              "drops")
                case "$para2" in
                    "volumes") dockerRmVolumes prod drops-database mysql
                       ;;
                    *) prodMan
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para2" in
                    "volumes") dockerRmVolumes prod dispenser-database mongo
                       ;;
                    *) prodMan
                       ;;
                esac
                  ;;
               "") dockerRm prod
                  ;;
               *) prodMan
                  ;;
          esac
	  ;;
	"admin")
	  dropsAdmin
	  ;;
	"leave")
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  prodMan
	  ;;
    esac
  done
}

function dev () {
  for (( ; ; ))
  do
    read -r -p $'\033[1;33mheureka-\033[1;34mDEV\033[1;33m-\033[1;34m'$1$'\033[1;33m> \e[0m' cmd sub para1 para2
    case "$cmd" in
	"up")
	  gitClone drops
	  dockerRun dev.drops
	  ;;
	"git")
	  case "$sub" in
		"clone") gitClone drops
			;;
		"rm") gitRemove drops
			;;
	        *) devMan $1
			;;
	  esac
	  ;;
	"docker")
	  case "$sub" in
		"up") dockerRun dev.drops
			;;
		"rm")
		  case "$para1" in
			"drops")
			  case "$para2" in
				"volumes") dockerRmVolumes dev drops-database mysql
					;;
				*) devMan $1
					;;
			  esac
			  ;;
			"dispenser")
			  case "$para2" in
				"volumes") dockerRmVolumes dev dispenser-database mongo
					;;
				*) devMan $1
					;;
			  esac
			  ;;
			"") dockerRm dev.drops
			  ;;
			*) devMan $1
			  ;;
		  esac
			;;
		*) devMan $1
			;;
	  esac
	  ;;
	"drops")
	  case "$sub" in
		"up")
		  case "$para1" in
			"man") dropsMan
			  ;;
			*) devMan $1
			  ;;
		  esac
			;;
		"admin") dropsAdmin
	  		;;
		*) devMan $1
			;;
	  esac
	  ;;
	"arise")
	  case "$sub" in
		"up")
		  case "$para1" in
			"man") ariseMan
	  		  ;;
			*) devMan $1
			  ;;
		  esac
			;;
		*) devMan $1
			;;
	  esac
	  ;;
	"leave")
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  devMan $1
	  ;;
	# Todo: catch arrow up and down
    esac
  done
}

function infra () {
  for (( ; ; ))
  do
    read -r -p $'\033[1;33mheureka-\033[1;34mDEV\033[1;33m-\033[1;34mINFRA\033[1;33m> \e[0m' cmd sub para1 para2
    case "$cmd" in
      "clone") gitClone infra;;
      "rm") gitRemove infra;;
      "docker")
        case "$sub" in
          "up") dockerRun infra;;
          "rm")
	     case "$para1" in
               "dispenser")
                  case "$para2" in
                    "volumes") dockerRmVolumes infra dispenser-database mongo;;
                    *) infraMan;;
                  esac
               ;;
               "") dockerRm infra;;
               *) infraMan;;
             esac
	  ;;
	  *) infraMan;;
	esac
      ;;
      "leave") break;;
      "exit") exit 1;;
      *) infraMan;;
    esac
  done
}

init
