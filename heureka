#!/bin/bash

source "git-setup.cfg"

source "commands/init"
source "commands/git-clone-rm"
source "commands/docker"
source "commands/drops"
source "commands/arise"

function man () {
  echo "
HEUREKA CLI
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  dev	                        Start development environment
  prod				Start production environment
  exit                          Close console
  *                             Help
"
}

function prodMan () {
  echo "
HEUREKA PROD-CLI
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  up				Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.prod' file
  stop				Stop all created containers.
  rm				Stop and remove all docker containers described in the docker-compose files
  rm drops volumes		Remove the drops volumes. That means the database contents.
  rm dispenser volumes		Remove the dispenser volumes. That means the database contents.
  admin				Sets admin access rights in DROPS for a specific user identified by its email address
  leave                         Leave PROD environment
  exit                          Close console
  *                             Help
"
}

function devMan () {
  echo "
HEUREKA DEV-CLI
Version: $(cat $(getDir)/VERSION)
Usage: [command]
Commands:
  git clone   			Clone the required git repositories
  git rm      			Remove the git repositories
  docker up   			Start the 'docker-compose up' considering the '.docker-conf/docker-compose/.env.dev' file
  docker rm   			Stop and remove all docker containers described in the docker-compose files
  docker rm drops volumes	Remove the drops volumes. That means the database contents.
  docker rm dispenser volumes   Remove the dispenser volumes. That means the database contents.
  drops up man			Shows a manual explaining how to setup the DROPS backend service
  drops admin			Sets admin access rights in DROPS for a specific user identified by its email address
  arise up man			Shows a manual explaining how to setup the ARISE frontend service
  leave				Leave DEV environment
  exit				Close console
  *           			Help
"
}

function init () {
  printf "Welcome to HEUREKA!\nSetup a development environment to implement the microservice DROPS."
  initPathes
  printf "\n"
  for (( ; ; ))
  do
    read -r -p "heureka> " environment
    case "$environment" in
	"dev")
	  dev
	  ;;
	"prod")
	  prod
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  man
	  ;;
    esac
  done
}

function prod () {
  for (( ; ; ))
  do
    read -r -p "heureka-PROD> " cmd para1 para2
    case "$cmd" in
	"up")
	  dockerRun prod
	  ;;
	"stop")
	  dockerStop prod
	  ;;
	"rm")
	  case "$para1" in
              "drops")
                case "$para2" in
                    "volumes") dockerRmVolumes drops-database mysql
                       ;;
                    *) prodMan
                       ;;
                esac
                  ;;
              "dispenser")
                case "$para2" in
                    "volumes") dockerRmVolumes dispenser-database mongo
                       ;;
                    *) prodMan
                       ;;
                esac
                  ;;
               "") dockerRm prod
                  ;;
               *) prodMan
                  ;;
          esac
	  ;;
	"admin")
	  dropsAdmin
	  ;;
	"leave")
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  prodMan
	  ;;
    esac
  done
}

function dev () {
  for (( ; ; ))
  do
    read -r -p "heureka-DEV> " cmd sub para1 para2
    case "$cmd" in
	"git")
	  case "$sub" in
		"clone") gitClone
			;;
		"rm") gitRemove
			;;
	        *) devMan
			;;
	  esac
	  ;;
	"docker")
	  case "$sub" in
		"up") dockerRun dev
			;;
		"rm")
		  case "$para1" in
			"drops")
			  case "$para2" in
				"volumes") dockerRmVolumes drops-database mysql
					;;
				*) devMan
					;;
			  esac
			  ;;
			"dispenser")
			  case "$para2" in
				"volumes") dockerRmVolumes dispenser-database mongo
					;;
				*) devMan
					;;
			  esac
			  ;;
			"") dockerRm dev
			  ;;
			*) devMan
			  ;;
		  esac
			;;
		*) devMan
			;;
	  esac
	  ;;
	"drops")
	  case "$sub" in
		"up")
		  case "$para1" in
			"man") dropsMan
			  ;;
			*) devMan
			  ;;
		  esac
			;;
		"admin") dropsAdmin
	  		;;
	  esac
	  ;;
	"arise")
	  case "$sub" in
		"up")
		  case "$para1" in
			"man") ariseMan
	  		  ;;
			*) devMan
			  ;;
		  esac
			;;
		*) devMan
			;;
	  esac
	  ;;
	"leave")
	  break
	  ;;
	"exit")
	  exit 1
	  ;;
	*)
	  devMan
	  ;;
	# Todo: catch arrow up and down
    esac
  done
}

init
