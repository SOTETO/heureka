#!/bin/bash

declare -A gitPathes
declare -A gitURLs
declare -A gitBranch

gitURLs[drops]="git@github.com:SOTETO/drops.git"
gitURLs[arise]="git@github.com:SOTETO/arise.git"
gitURLs[widgetUser]="git@github.com:SOTETO/vca-widget-user.git"
gitURLs[oauthModule]="git@github.com:SOTETO/play2-oauth-client.git"

gitBranch[drops]="develop"
gitBranch[arise]="develop"
gitBranch[widgetUser]="master"
gitBranch[oauthModule]="dev"

function getDir () {
  # Taken from https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel
  local SOURCE="${BASH_SOURCE[0]}"
  local DIR=""
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  echo "$DIR"
}

function getBase () {
  local separated=""
  local base=""
  read -p "Do you want to enter one common base path for all repositories? [Y,n] " separated
  case "$separated" in
	Yes|yes|Y|y|"")
	    local DIR="$(getDir)"
	    DIR=${DIR%/*} # see https://tldp.org/LDP/LG/issue18/bash.html
	    read -p "Enter the base path [$DIR]: " -e base
	    if [[ $base == "" || -z $base ]]; then
		base=$DIR
	    fi
	    ;;
	No|no|N|n) base=""
	    ;;
	*) echo "Please answer 'Yes' or 'No'."
           exit 1
            ;;
  esac
  echo "$base"
}

function getRepoPath () {
  local path
  read -p "Enter a $3path for the repository of the $2 system $1 [$1]: " -e path
  case "$path" in
        $1|"") path="$1"
            ;;
  esac
  echo "$path"
}

function createGITRepos () {
  printf "Several GIT repositories have to be cloned.\nThus, you can define a base path for all the repositories or you can enter a path for each repository.\n\n"
  local basePath="$(getBase)"
  local sub="sub"
  if [[ -z $basePath ]]; then
    sub=""
  fi
  if [[ $basePath != *"/" && -n $basePath ]]; then
    basePath="$basePath/"
  fi
  gitPathes[base]=$basePath
  printf "\n"
  gitPathes[drops]="$(getRepoPath drops backend $sub)"
  gitPathes[arise]="$(getRepoPath arise frontend $sub)"
  gitPathes[widgetUser]="$(getRepoPath vca-widget-user widget $sub)"
  gitPathes[oauthModule]="$(getRepoPath play2-oauth-client module $sub)"
}

function clone() {
  git clone --branch $3 $2 "${gitPathes[base]}$1"
}

function gitClone () {

  clone "${gitPathes[drops]}" "${gitURLs[drops]}" "${gitBranch[drops]}"
  clone "${gitPathes[arise]}" "${gitURLs[arise]}" "${gitBranch[arise]}"
  clone "${gitPathes[widgetUser]}" "${gitURLs[widgetUser]}" "${gitBranch[widgetUser]}"
  clone "${gitPathes[oauthModule]}" "${gitURLs[oauthModule]}" "${gitBranch[oauthModule]}"

}

function gitRemove () {
  rm -R "${gitPathes[base]}${gitPathes[drops]}"
  rm -R "${gitPathes[base]}${gitPathes[arise]}"
  rm -R "${gitPathes[base]}${gitPathes[widgetUser]}"
  rm -R "${gitPathes[base]}${gitPathes[oauthModule]}"

  # Todo: Remove all empty directories of the base path.
}

function init () {
  printf "Welcome to HEUREKA!\nSetup a development environment to implement the microservice DROPS."
  createGITRepos
  printf "\n"

  for (( ; ; ))
  do
    read -p "heureka> " cmd
    case "$cmd" in
	"git")
	  mkdir -p "${gitPathes[base]}"
	  gitClone
	  ;;
	"rm")
	  gitRemove
	  ;;
	"exit") exit 1
	  ;;
	# Todo: catch arrow up and down
    esac
  done
}

init

# TODO: read config; start docker; start local develop systems
