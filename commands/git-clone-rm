#!/bin/bash
set -e

export WORKDIR=$(cd $(dirname $0) && pwd)
. "$WORKDIR/common"

function clone() {
  #echo "git clone --branch $3 $2 $1"
  if [[ -d "$1" && "$(ls -A $1)" ]]; then
    printf "Directory $1 is not empty.\n"
  else
    git clone --branch $3 $2 $1
  fi
}

#1 is the name of the MS (will be transformed into its ID: MS_<name>, while name will be uppercase)
function gitClone () {
  local id="MS_"${1^^}

  local repo_set=${id}[set]
  local related_ms=${id}[related]
  gitCloneRepoList "${!repo_set}"

  local related=( "${!related_ms}" )
  for ms in $related; do
    local ms_set=${ms}[set]
    gitCloneRepoList "${!ms_set}"
  done
}

#1 list of repositories
function gitCloneRepoList () {
  repos=( "$1" )
  for repo in $repos; do
    local path=${repo}[path]
    local url=${repo}[url]
    local branch=${repo}[branch]
    clone $(expandPath "${!path}") "${!url}" "${!branch}"
  done
}

#1 is the name of the MS (will be transformed into its ID: MS_<name>, while name will be uppercase)
#2 a Boolean indicating if also the related MS have to be removed
function gitRemove () {
  local id="MS_"${1^^}
  local repo_set=${id}[set]
  gitRemoveRepoList "${!repo_set}"

  if [ "$2" = true ]; then
    local related_ms=${id}[related]
    local related=( "${!related_ms}" )
    for ms in $related; do
      local ms_set=${ms}[set]
      gitRemoveRepoList "${!ms_set}"
    done
  fi
}

#1 list of repositories
function gitRemoveRepoList () {
  repos=( "$1" )
  for repo in $repos; do
    local path=${repo}[path]
    rm -rf $(expandPath "${!path}")
  done
}
