#!/bin/bash
set -e

function createNewMS() {
  local name
  local upper
  local dirName

  printf "START MS CREATION WIZARD\n"
  # Read name of new MS
  read -r -p $"What is the name of your new microservice? " name
  dirName="ms-$name"
  upper=${name^^}

  # Create directory
  mkdir microservices/"$dirName"

  # Touch required files
  touch microservices/"$dirName"/env.sh
  touch microservices/"$dirName"/default.conf
  touch microservices/"$dirName"/readme.md
  touch microservices/"$dirName"/ms_"$name".yml

  # Copy readme.md
  cp templates/readme.md microservices/"$dirName"/readme.md

  # Copy required files from NEW environment
  cp -r templates/.docker-conf microservices/"$dirName"/.docker-conf

  # Use MS name in .env file
  fillPlaceholderEnvConf "$dirName" "$name" "MS_$upper"

  # Write contents of docker-compose file (NEW environment) to newly created one
  cp templates/dev.yml microservices/"$dirName"/ms_"$name".yml

  # Write docker-setup.cfg
  echo "##############################################" >> microservices/"$dirName"/default.conf
  echo "# KNOWN ENVIRONMENTS THAT HEUREKA CAN DEPLOY #" >> microservices/"$dirName"/default.conf
  echo "##############################################" >> microservices/"$dirName"/default.conf
  echo "" >> microservices/"$dirName"/default.conf
  echo "[ENV_MS_$upper]" >> microservices/"$dirName"/default.conf
  echo "compose_files=base.yml microservices/$dirName/ms_$name.yml" >> microservices/"$dirName"/default.conf
  echo "env_file=microservices/$dirName/.docker-conf/.env" >> microservices/"$dirName"/default.conf
  echo "server_name=localhost" >> microservices/"$dirName"/default.conf

  # Read and write GIT config
  declare -a repos
  local gitRepos="n"
  read -r -p $"Do you want to add some git repositories? (y / n) " gitRepos
  if [[ $gitRepos = "y" || $gitRepos = "Y" || $gitRepos = "yes" || $gitRepos == "Yes" ]]; then
    echo "" >> microservices/"$dirName"/default.conf
    echo "#########################################" >> microservices/"$dirName"/default.conf
    echo "# GIT repositories of the microservices #" >> microservices/"$dirName"/default.conf
    echo "#########################################" >> microservices/"$dirName"/default.conf
    echo "" >> microservices/"$dirName"/default.conf

    printf "Enter the git repositories!\n\n"
    for (( ; ; ))
    do
      local gitName
      local gitUrl
      local gitBranch
      local gitPath
      local gitID
      read -r -p $"Name of the git repository: " gitName
      read -r -p $"URL of the git repository: " gitUrl
      read -r -p $"Branch of the git repository: " gitBranch
      read -p $"Path of the git repository: " gitPath
      gitID=$(echo "$gitName" | sed -r 's/[^A-Za-z]/_/g')

      echo "[$gitID]" >> microservices/"$dirName"/default.conf
      echo "url=$gitUrl" >> microservices/"$dirName"/default.conf
      echo "branch=$gitBranch" >> microservices/"$dirName"/default.conf
      echo "name=$gitName" >> microservices/"$dirName"/default.conf
      echo "path=$gitPath" >> microservices/"$dirName"/default.conf
      echo "" >> microservices/"$dirName"/default.conf

      repos+=($gitID)

      read -r -p $"Do you want to add more repositories (y / n) " gitRepos
      if [[ $gitRepos = "n" || $gitRepos = "N" || $gitRepos = "no" || $gitRepos == "No" ]]; then
        break
      fi
    done
  fi

  local related
  printf "\nDoes your microservice is related to another one ( "
  for i in "${MICROSERVICES[@]}"; do printf "MS_${i^^} "; done
  printf ")?\n"
  read -r -p $"Separate related microservices by space ([Enter] no related services): " related

  echo "#############################################" >> microservices/"$dirName"/default.conf
  echo "# MICROSERVICES AS COMPOSITION OF GIT REPOS #" >> microservices/"$dirName"/default.conf
  echo "###############################################" >> microservices/"$dirName"/default.conf
  echo "" >> microservices/"$dirName"/default.conf

  echo "[MS_$upper]" >> microservices/"$dirName"/default.conf
  echo "set=${repos[*]}" >> microservices/"$dirName"/default.conf
  if [[ $related != "" ]]; then
    echo "related=$related" >> microservices/"$dirName"/default.conf
  fi

  writeEnvScript $name $dirName
  printf "\nNew MS-$upper has been successfully created!\n\n"
  exec bash heureka
}

function fillPlaceholderEnvConf() {
  local ENV_TEMPLATE=templates/.docker-conf/.env
  local ENV_FILE=microservices/"$1"/.docker-conf/.env
  local DEFAULT_MS_CONF=microservices/"$1"/default.conf
  echo "[DOCKER_ENV_$3]" >> "$DEFAULT_MS_CONF"
  # Replace placeholder variables by the DIR name of the new ms and its name; Append the config to the default.conf; and copy the docker config to the .docker-conf/.env file
  MS_NAME_PLACEHOLDER="$2" MS_DIR_PLACEHOLDER="$1" envsubst < "$ENV_TEMPLATE" > "$ENV_FILE.tmp" && cat "$ENV_FILE.tmp" >> "$DEFAULT_MS_CONF" && mv "$ENV_FILE.tmp" "$ENV_FILE"
}

function writeEnvScript() {
  local name=$1
  local dirName=$2
  local scriptFile="microservices/$dirName/env.sh"

  echo "#!/bin/bash" >> "$scriptFile"
  echo -e "set -e\n" >> "$scriptFile"

  echo "function "$name"_name () {" >> "$scriptFile"
  echo "  echo \"MS-\"\$("$name"_command_uppercase)" >> "$scriptFile"
  echo -e "}\n" >> "$scriptFile"

  echo "function "$name"_command () {" >> "$scriptFile"
  echo "  echo \"$name\"" >> "$scriptFile"
  echo -e "}\n" >> "$scriptFile"

  echo "function "$name"_command_uppercase () {" >> "$scriptFile"
  echo "  local cmd=\"\$("$name"_command)\"" >> "$scriptFile"
  echo "  echo \${cmd^^}" >> "$scriptFile"
  echo -e "}\n" >> "$scriptFile"

  echo "function "$name"_description () {" >> "$scriptFile"
  echo "  local name=\"MS-\$("$name"_command_uppercase)\"" >> "$scriptFile"
  echo "  echo \"Initiate a development environment for the \$name.\"" >> "$scriptFile"
  echo -e "}\n" >> "$scriptFile"

  echo "function "$name"_env () {" >> "$scriptFile"
  echo "  # TODO - Copy from microservices/ms-drops/env.sh for an example" >> "$scriptFile"
  echo "  echo \"TODO - Implement the console for MS-\$("$name"_command_uppercase)\"" >> "$scriptFile"
  echo "  reloadMSConfig "$name >> "$scriptFile"
  echo "  prompt=\$(calcPrompt)" >> "$scriptFile"
  echo "  for (( ; ; ))" >> "$scriptFile"
  echo "  do" >> "$scriptFile"
  echo "    read -r -p \$\"\${prompt}\" cmd" >> "$scriptFile"
  echo "    case \"\$cmd\" in" >> "$scriptFile"
  echo "        \"up\")" >> "$scriptFile"
  echo "          gitClone "$name >> "$scriptFile"
  echo "          dockerRun ms_"$name >> "$scriptFile"
  echo "          initMSNavigation "$name >> "$scriptFile"
  echo "          setConfig \"running\" \"yes\"" >> "$scriptFile"
  echo "          prompt=\$(calcPrompt)" >> "$scriptFile"
  echo "        ;;" >> "$scriptFile"
  echo "       \"rm\")" >> "$scriptFile"
  echo "          dockerRm ms_"$name >> "$scriptFile"
  echo "          setConfig \"running\" \"no\"" >> "$scriptFile"
  echo "          prompt=\$(calcPrompt)" >> "$scriptFile"
  echo "        ;;" >> "$scriptFile"
  echo "       \"admin\")" >> "$scriptFile"
  echo "          prodDropsAdmin $name" >> "$scriptFile"
  echo "        ;;" >> "$scriptFile"
  echo "       \"leave\")" >> "$scriptFile"
  echo "          setEnvToIdle" >> "$scriptFile"
  echo "          prompt=\$(calcPrompt)" >> "$scriptFile"
  echo "          break" >> "$scriptFile"
  echo "        ;;" >> "$scriptFile"
  echo "        \"exit\")" >> "$scriptFile"
  echo "         exit 1" >> "$scriptFile"
  echo "        ;;" >> "$scriptFile"
  echo "        *)" >> "$scriptFile"
  echo "          "$name"_man" >> "$scriptFile"
  echo "        ;;" >> "$scriptFile"
  echo "    esac" >> "$scriptFile"
  echo "  done" >> "$scriptFile"
  echo -e "}\n" >> "$scriptFile"

  echo "function "$name"_man() {" >> "$scriptFile"
  echo "man \"MS\" \$("$name"_name)" >> "$scriptFile"
  echo "echo -e \"" >> "$scriptFile"
  echo " up                            Start the 'docker-compose up' and clones all specified GIT repositories." >> "$scriptFile"
  echo " rm                            Stop and removes all docker containers" >> "$scriptFile"
  echo " admin                         If the system is running, you can name admins" >> "$scriptFile"
  echo " leave                         Leave DEV environment" >> "$scriptFile"
  echo " exit                          Close console" >> "$scriptFile"
  echo " *                             Help" >> "$scriptFile"
  echo "\"" >> "$scriptFile"
  echo "}" >> "$scriptFile"
}
