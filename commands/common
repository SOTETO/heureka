#!/bin/bash
set -e

stateFile=".state"

declare -A gitPathes

msConfigs=(microservices/*/default.conf)
configFiles=("default.conf" "${msConfigs[@]}")

for file in "${configFiles[@]}"; do
  while read line; do
    if [[ $line =~ ^"["(.+)"]"$ ]]; then
        arrname=${BASH_REMATCH[1]}
        declare -A $arrname
    elif [[ $line = \#* ]]; then
        continue
    elif [[ $line =~ ^([_[:alpha:]][_[:alnum:]]*)"="(.*) ]]; then
        declare ${arrname}[${BASH_REMATCH[1]}]="${BASH_REMATCH[2]}"
    fi
  done < "$file"
done

#1 name of the MS the config has to be reloaded for (lowercase)
function reloadMSConfig () {
  local DOCKER_CONF_FILE=microservices/ms-$1/.docker-conf/.env
  local CONF_ID="DOCKER_ENV_MS_"${1^^}
  reloadConfig "$CONF_ID" "$DOCKER_CONF_FILE"
}

#1 name of the environment (lowercase)
function reloadGlobalConfig () {
  local DOCKER_CONF_FILE=.docker-conf/mode_$1/.env
  local CONF_ID="DOCKER_ENV_"${1^^}
  reloadConfig "$CONF_ID" "$DOCKER_CONF_FILE"
}

#1 name of the associative array holding env config; #2 path of the .env file
function reloadConfig () {
  local DOCKER_CONF_FILE=$2
  local CONF_ID=$1

  eval local CONF_KEYS=\( \${!${CONF_ID}[@]} \)
  for CONF_VAR in "${CONF_KEYS[@]}"
  do
    local NEW_VALUE=${CONF_ID}[$CONF_VAR]
    # echo "$CONF_VAR should get the value ${!NEW_VALUE}"
    sed -i "s+$CONF_VAR=.*+$CONF_VAR=${!NEW_VALUE}+" "$DOCKER_CONF_FILE"
  done
}

function getDir () {
  # Taken from https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel
  local SOURCE="${BASH_SOURCE[0]}"
  local DIR=""
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  echo "$DIR"
}

function expandPath () {
  # Taken from https://stackoverflow.com/questions/3963716/how-to-manually-expand-a-special-variable-ex-tilde-in-bash/29310477#29310477
  local path
  local -a pathElements resultPathElements
  IFS=':' read -r -a pathElements <<<"$1"
  : "${pathElements[@]}"
  for path in "${pathElements[@]}"; do
    : "$path"
    case $path in
      "~+"/*)
        path=$PWD/${path#"~+/"}
        ;;
      "~-"/*)
        path=$OLDPWD/${path#"~-/"}
        ;;
      "~"/*)
        path=$HOME/${path#"~/"}
        ;;
      "~"*)
        username=${path%%/*}
        username=${username#"~"}
        IFS=: read -r _ _ _ _ _ homedir _ < <(getent passwd "$username")
        if [[ $path = */* ]]; then
          path=${homedir}/${path#*/}
        else
          path=$homedir
        fi
        ;;
    esac
    resultPathElements+=( "$path" )
  done
  local result
  printf -v result '%s:' "${resultPathElements[@]}"
  printf '%s\n' "${result%:}"
}
